{"version":3,"sources":["../../src/services/notification.service.ts"],"sourcesContent":["import { initializeDbConnection } from '@/app';\nimport { uid } from 'uid';\nimport path from 'path';\nimport moment from 'moment';\nimport admin from \"firebase-admin\";\nimport {getMessaging} from \"firebase-admin/messaging\";\nimport Stripe from 'stripe';\nimport UserService from './users.service';\n\nclass NotificationService {\n  private stripe = new Stripe(process.env.STRIPE_TEST_KEY, { apiVersion: '2022-11-15' });\n  public userService = new UserService();\n\n  public async getNotofications(userId: String) {\n    const getNotoficationsSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const notifications = await getNotoficationsSession.executeRead(tx =>\n        tx.run(\n          'match (notification:notification)<-[:got_notified]-(u:user {id: $userId}) return notification',\n          {\n            userId: userId\n          }\n        ),\n      );\n\n      notifications.records.map(record => {\n        let days = moment().diff(record.get(\"notification\").properties.time, \"days\");\n        let hours = moment().diff(record.get(\"notification\").properties.time, \"hours\");\n        let minutes = moment().diff(record.get(\"notification\").properties.time, \"minutes\");\n        let seconds = moment().diff(record.get(\"notification\").properties.time, \"seconds\");\n        \n        if(days == 0) {\n          if(hours == 0) {\n            if(minutes == 0) {\n              if(seconds < 60) {\n                record.get(\"notification\").properties.time = `${seconds} seconds`;\n              } else {\n                record.get(\"notification\").properties.time = `${minutes} minutes`;\n              }\n            } else if(minutes < 60 ) {\n              record.get(\"notification\").properties.time = `${minutes} minutes`;\n            } else {\n              record.get(\"notification\").properties.time = `${hours} hours`;\n            }\n          } else if(hours < 24) {\n            record.get(\"notification\").properties.time = `${hours} hours`;\n          } else {\n            record.get(\"notification\").properties.time = `${days} days`;\n          }\n        } else {\n          record.get(\"notification\").properties.time = `${days} days`;\n        }\n      })\n\n      return notifications.records.map(record => record.get(\"notification\").properties);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      getNotoficationsSession.close();\n    }\n  }\n\n  public async pushSellerNotificatons(sellerId: string, title: string, body: string) {\n    const pushNotificatonsSession = initializeDbConnection().session({ database: 'neo4j' });\n    const getTokensSession = initializeDbConnection().session({ database: 'neo4j' });\n\n    try {\n      const deviceToken = await getTokensSession.executeRead(tx =>\n        tx.run(\n          'match (seller {id: $sellerId})<-[:IS_A]-(user:user)-[:logged_in_with]->(deviceToken:deviceToken) return deviceToken',\n          {\n            sellerId: sellerId,\n          },\n        ),\n      );\n  \n      console.log(deviceToken.records.map(record => record.get(\"deviceToken\").properties.token)[0]);\n\n      if(deviceToken.records.length > 0) {\n        const message = {\n          notification: {\n            title: title,\n            body: body\n          },\n          token: deviceToken.records.map(record => record.get(\"deviceToken\").properties.token)[0]\n        }\n        \n        getMessaging().send(message).then((res) => {\n          console.log(\"successfully sent\");\n        }).catch((error) => {\n          console.log(error);\n        })\n      }\n\n    \n      await pushNotificatonsSession.executeWrite(tx =>\n        tx.run(\n          'match (seller {id: $sellerId})<-[:IS_A]-(user:user) create (user)-[:got_notified]->(notification:notification {id: $notificationsId, title: $title, body: $body, time: $time}) return notification',\n          {\n            sellerId: sellerId,\n            notificationsId: uid(10),\n            title: title,\n            body: body,\n            time: moment().format('MMMM DD, YYYY, h:mm:ss a'),\n          },\n        ),\n      );\n\n    } catch (error) {\n      console.log(error);\n    } finally {\n      pushNotificatonsSession.close();\n    }\n  }\n}\n\nexport default NotificationService;\n"],"names":["NotificationService","getNotofications","userId","getNotoficationsSession","initializeDbConnection","session","database","notifications","executeRead","tx","run","records","map","record","days","moment","diff","get","properties","time","hours","minutes","seconds","error","console","log","close","pushSellerNotificatons","sellerId","title","body","pushNotificatonsSession","getTokensSession","deviceToken","token","length","message","notification","getMessaging","send","then","res","catch","executeWrite","notificationsId","uid","format","stripe","Stripe","process","env","STRIPE_TEST_KEY","apiVersion","userService","UserService"],"mappings":"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"}
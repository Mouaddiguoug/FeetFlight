{"version":3,"sources":["../../src/services/admin.service.ts"],"sourcesContent":["import { initializeDbConnection } from '@/app';\nimport { uid } from 'uid';\nimport aws from 'aws-sdk';\nimport moment from 'moment';\nimport Stripe from 'stripe';\n\nclass adminService {\n  private stripe = new Stripe(process.env.STRIPE_TEST_KEY, { apiVersion: '2022-11-15' });\n\n  public async getUnverifiedSellers() {\n    const getSellerIdentityCardSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const seller = await getSellerIdentityCardSession.executeRead(tx =>\n        tx.run(\n          'match (s:seller {verified: false}) return s',\n        ),\n      );\n      return seller.records.map(record => record.get(\"s\").properties);\n    } catch (error) {\n      console.log(error);\n    } finally {\n        getSellerIdentityCardSession.close();\n    }\n  }\n\n  public async getSellerIdentityCard(userid: string) {\n    const getSellerIdentityCardSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const seller = await getSellerIdentityCardSession.executeRead(tx =>\n        tx.run(\n          'match (user {id: $userid})-[:IS_A]-(s:seller) return s',\n          {\n            userid: userid,\n          },\n        ),\n      );\n      return {frontSide: seller.records.map(record => record.get(\"s\").properties.frontIdentityCard)[0], backSide: seller.records.map(record => record.get(\"s\").properties.backtIdentityCard)[0]};\n    } catch (error) {\n      console.log(error);\n    } finally {\n        getSellerIdentityCardSession.close();\n    }\n  }\n}\n\nexport default adminService;\n"],"names":["adminService","getUnverifiedSellers","getSellerIdentityCardSession","initializeDbConnection","session","database","seller","executeRead","tx","run","records","map","record","get","properties","error","console","log","close","getSellerIdentityCard","userid","frontSide","frontIdentityCard","backSide","backtIdentityCard","stripe","Stripe","process","env","STRIPE_TEST_KEY","apiVersion"],"mappings":";;;;+BA6CA;;;eAAA;;;qBA7CuC;+DAIpB;;;;;;;;;;;;;;;;;;;AAEnB,IAAA,AAAMA,eAAN,MAAMA;IAGJ,MAAaC,uBAAuB;QAClC,MAAMC,+BAA+BC,IAAAA,2BAAsB,IAAGC,OAAO,CAAC;YAAEC,UAAU;QAAQ;QAC1F,IAAI;YACF,MAAMC,SAAS,MAAMJ,6BAA6BK,WAAW,CAACC,CAAAA,KAC5DA,GAAGC,GAAG,CACJ;YAGJ,OAAOH,OAAOI,OAAO,CAACC,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU;QAChE,EAAE,OAAOC,OAAO;YACdC,QAAQC,GAAG,CAACF;QACd,SAAU;YACNb,6BAA6BgB,KAAK;QACtC;IACF;IAEA,MAAaC,sBAAsBC,MAAc,EAAE;QACjD,MAAMlB,+BAA+BC,IAAAA,2BAAsB,IAAGC,OAAO,CAAC;YAAEC,UAAU;QAAQ;QAC1F,IAAI;YACF,MAAMC,SAAS,MAAMJ,6BAA6BK,WAAW,CAACC,CAAAA,KAC5DA,GAAGC,GAAG,CACJ,0DACA;oBACEW,QAAQA;gBACV;YAGJ,OAAO;gBAACC,WAAWf,OAAOI,OAAO,CAACC,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU,CAACQ,iBAAiB,CAAC,CAAC,EAAE;gBAAEC,UAAUjB,OAAOI,OAAO,CAACC,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU,CAACU,iBAAiB,CAAC,CAAC,EAAE;YAAA;QAC3L,EAAE,OAAOT,OAAO;YACdC,QAAQC,GAAG,CAACF;QACd,SAAU;YACNb,6BAA6BgB,KAAK;QACtC;IACF;;QAnCA,uBAAQO,UAAS,IAAIC,eAAM,CAACC,QAAQC,GAAG,CAACC,eAAe,EAAE;YAAEC,YAAY;QAAa;;AAoCtF;MAEA,WAAe9B"}
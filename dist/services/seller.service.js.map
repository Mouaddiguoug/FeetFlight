{"version":3,"sources":["../../src/services/seller.service.ts"],"sourcesContent":["import { initializeDbConnection, stripe } from '@/app';\nimport { Buffer } from 'node:buffer';\nimport { writeFile } from 'node:fs';\nimport path from 'node:path';\nimport moment from 'moment';\n\nclass sellerService {\n  \n  public prices = [];\n\n  public async createSubscribePlans(userId: string, subscriptionPlansData: any[]) {\n    try {\n      const createdSubscriptionPlans = subscriptionPlansData.data.subscriptionPlans.map(subscriptionPlan => {\n        return this.createSubscribePlan(subscriptionPlan.subscriptionPlanPrice, subscriptionPlan.subscriptionPlanTitle, userId);\n      });\n\n      const subscriptionPlans = await Promise.all(createdSubscriptionPlans);\n\n      return subscriptionPlans;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public async changePlans(plans: any[]) {\n    try {\n      const updatedPlans = plans.map(async plan => {\n        const oldPrice = await stripe.prices.retrieve(plan.id);\n        \n        await stripe.products.update(oldPrice.product.toString(), {\n          name: plan.name,\n        })\n        \n        const newPrice = await stripe.prices.create({\n          currency: \"EUR\",\n          product: oldPrice.product.toString(),\n          recurring: {\n            interval: \"month\",\n            interval_count: 1,\n          },\n          unit_amount: plan.price * 100\n        });\n        await stripe.prices.update(oldPrice.id, {\n          active: false\n        })\n        \n        return this.changePlansInDb(plan.id, newPrice.id, plan.name, plan.price);\n      })\n\n      return updatedPlans.length > 0 ? {\"message\": \"plans were updated successfully\"} : {\"message\": \"Something went wrong\"};\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public async changePlansInDb(oldPlanId: string, newPlanId: string, name: string, price: number) {\n    const changePlanSession = initializeDbConnection().session();\n    try {\n      const updatedPlan = await changePlanSession.executeWrite(tx =>\n        tx.run('match (plan:plan {id: $planId}) set plan.id = $newPlanId, plan.name = $name, plan.price = $price', {\n          planId: oldPlanId,\n          newPlanId: newPlanId,\n          name: name,\n          price: price\n        }),\n      );\n      \n\n      return updatedPlan;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public async getSubscriptiionPlans(userId: string) {\n    try {\n      const getSubscriptionPlansSession = initializeDbConnection().session();\n\n      const subscriptionPlans = await getSubscriptionPlansSession.executeWrite(tx =>\n        tx.run('match (user {id: $userId})-[:IS_A]->(s:seller)-[:HAS_A]->(subscriptionPlan:subscriptionPlan) return subscriptionPlan', {\n          userId: userId,\n        }),\n      );\n\n      return subscriptionPlans.records.map(record => record.get('subscriptionPlan').properties);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public async getAllSellers() {\n    try {\n      const getAllSellersSession = initializeDbConnection().session();\n\n      const allSellers = await getAllSellersSession.executeRead(tx =>\n        tx.run('match (u:user)-[:IS_A]-(s:seller) where exists((u)-[:IS_A]-(s)) return u'),\n      );\n\n      return allSellers.records.map(record => record.get('u').properties);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public createSubscribePlan = async (subscriptionPlanPrice: number, subscriptionPlanTitle: string, userId: string) => {\n    const createSubscribePlansSession = initializeDbConnection().session();\n    try {\n      const product = await stripe.products.create({\n        name: subscriptionPlanTitle,\n      });\n\n      const price = await this.stripe.prices.create({\n        unit_amount: subscriptionPlanPrice * 100,\n        currency: 'eur',\n        recurring: { interval: 'month' },\n        metadata: {\n          sellerId: userId,\n        },\n        product: product.id,\n      });\n\n      const createdPlans = await createSubscribePlansSession.executeWrite(tx =>\n        tx.run(\n          'match (user {id: $userId})-[:IS_A]->(s:seller) create (s)-[:HAS_A]->(subscriptionPlan:subscriptionPlan {id: $subscriptionPlanId, price: $subscriptionPlanPrice, title: $subscriptionPlanTitle}) return subscriptionPlan',\n          {\n            subscriptionPlanPrice: subscriptionPlanPrice,\n            subscriptionPlanTitle: subscriptionPlanTitle,\n            userId: userId,\n            subscriptionPlanId: price.id,\n          },\n        ),\n      );\n\n      return createdPlans.records.map(record => record.get('subscriptionPlan').properties);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      createSubscribePlansSession.close();\n    }\n  };\n\n  public getFollowersCount = async (sellerId: string) => {\n    const getFlowwersSession = initializeDbConnection().session();\n    try {\n      const followersCount = await getFlowwersSession.executeWrite(tx =>\n        tx.run('match (u:user)-[s:SUBSCRIBED_TO]->(seller {id: $sellerId}) return count(s) as followersCount', {\n          sellerId: sellerId,\n        }),\n      );\n      \n      return followersCount.records.map(record => record.get(\"followersCount\"))[0].low;\n    } catch (error) {\n      console.log(error);\n    } finally {\n      getFlowwersSession.close();\n    }\n  };\n\n  public uploadIdentityCard = async (identityCardData: any, userId: string) => {\n    try {\n      for (let key in identityCardData) {\n        console.log(identityCardData[key][0]);\n        \n        const filecontent = Buffer.from(identityCardData[key][0].buffer, 'binary');\n\n        writeFile(path.join(__dirname, \"../../public/files/identity_cards\", `${moment().format(\"ssMMyyyy\")}${userId}${identityCardData[key][0].originalname.replace(\".\", \"\")}`), filecontent, (err) => {\n          if (err) return console.log(err);\n          this.uploadIdentityCardToDb(`/public/files/identity_cards/${moment().format(\"ssMMyyyy\")}${userId}${identityCardData[key][0].originalname.replace(\".\", \"\")}`, userId, identityCardData[key].fieldname);\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  public uploadIdentityCardToDb = async (location: string, userId: string, side: string) => {\n    const uploadIdentityCardSession = initializeDbConnection().session();\n    try {\n      switch (side) {\n        case 'frontSide':\n          await uploadIdentityCardSession.executeWrite(tx =>\n            tx.run('match (user {id: $userId})-[:IS_A]->(s:seller) set s.frontIdentityCard = $frontIdentityCard', {\n              userId: userId,\n              frontIdentityCard: location,\n            }),\n          );\n          break;\n        case 'backSide':\n          await uploadIdentityCardSession.executeWrite(tx =>\n            tx.run('match (user {id: $userId})-[:IS_A]->(s:seller) set s.backtIdentityCard = $backIdentityCard', {\n              userId: userId,\n              backIdentityCard: location,\n            }),\n          );\n          break;\n        default:\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      uploadIdentityCardSession.close();\n    }\n  };\n\n  \n}\n\nexport default sellerService;\n"],"names":["sellerService","createSubscribePlans","userId","subscriptionPlansData","createdSubscriptionPlans","data","subscriptionPlans","map","subscriptionPlan","createSubscribePlan","subscriptionPlanPrice","subscriptionPlanTitle","Promise","all","error","console","log","changePlans","plans","updatedPlans","plan","oldPrice","stripe","prices","retrieve","id","products","update","product","toString","name","newPrice","create","currency","recurring","interval","interval_count","unit_amount","price","active","changePlansInDb","length","oldPlanId","newPlanId","changePlanSession","initializeDbConnection","session","updatedPlan","executeWrite","tx","run","planId","getSubscriptiionPlans","getSubscriptionPlansSession","records","record","get","properties","getAllSellers","getAllSellersSession","allSellers","executeRead","createSubscribePlansSession","metadata","sellerId","createdPlans","subscriptionPlanId","close","getFollowersCount","getFlowwersSession","followersCount","low","uploadIdentityCard","identityCardData","key","filecontent","Buffer","from","buffer","writeFile","path","join","__dirname","moment","format","originalname","replace","err","uploadIdentityCardToDb","fieldname","location","side","uploadIdentityCardSession","frontIdentityCard","backIdentityCard"],"mappings":"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"}
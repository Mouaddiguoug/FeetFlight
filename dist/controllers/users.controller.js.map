{"version":3,"sources":["../../src/controllers/users.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { User } from '@interfaces/users.interface';\nimport userService from '@services/users.service';\n\nclass UsersController {\n  public userService = new userService();\n\n  public getUsers = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const findAllUsersData: User[] = await this.userService.findAllUser();\n\n      res.status(200).json({ data: findAllUsersData, message: 'findAll' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getUserById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = String(req.params.id);\n      const findOneUserData = await this.userService.findUserById(userId);\n\n      res.status(200).json(findOneUserData);\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public generateAiPictures = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const color = req.body.color;\n      const category = req.body.category;\n\n      const generatedPictures = await this.userService.generateAiPictures(color, category);\n      \n\n      res.status(200).json(generatedPictures);\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public checkForSale = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const postId = String(req.params.postId);\n      const userId = String(req.params.userId);\n      const plan = String(req.params.plan);\n      const checkedFOrSale = await this.userService.checkForSale(userId, postId);\n      const checkForSubscription = await this.userService.checkForSubscriptionbyUserId(userId, postId, plan);\n\n      console.log(checkForSubscription);\n      res.status(200).json(checkedFOrSale || checkForSubscription);\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getSellerPlans = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = String(req.params.id);\n      const sellerPlans = await this.userService.getSellerPlans(userId);\n\n      res.status(200).json({ data: sellerPlans });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getFollowedSellers = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = String(req.params.id);\n      const followedSellers = await this.userService.getFollowedSellers(userId);\n\n      res.status(200).json(followedSellers);\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public changePassword = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const email = String(req.params.email);\n      const userData = req.body;\n      const findOneUserData = await this.userService.changePassword(email, userData);\n\n      res.status(200).json({ data: findOneUserData, message: 'findOne' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public emailConfirming = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const token = String(req.params.token);\n      const confirmed = await this.userService.emailConfirming(token);\n\n      res.status(201).redirect(\"/\");\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public buyPost = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = String(req.params.id);\n      const saleData = req.body;\n\n      const boughtPost = await this.userService.buyPosts(userId, saleData);\n\n      res.status(200).json({ url: boughtPost });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public subscribe = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = String(req.params.id);\n      const subscriptionData = req.body;\n\n      const subscribeSssion = await this.userService.subscribe(userId, subscriptionData);\n\n      res.status(200).json(subscribeSssion);\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public generateOtp = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const email = String(req.params.email);\n\n      const generatedHash = await this.userService.generateOtp(email);\n\n      res.status(200).json(generatedHash);\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public verifyOtp = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const email = String(req.params.email);\n      const otpSettings = req.body;\n\n      const result: any = await this.userService.verifyOtp(otpSettings, email);\n\n      res.status(result.message == \"success\" ? 200 : 400).json(result);\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public cancelSubscription = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n\n    try {\n      const userId = String(req.params.id);\n      const sellerId = String(req.params.sellerId);\n\n      const canceledSubscription = await this.userService.cancelSubscription(userId, sellerId);\n\n      res.status(200).json({ canceledSubscription: canceledSubscription });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public checkForSubscribtion = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = String(req.params.id);\n      const postId = req.body.data.postId;\n\n      const isSubscribed = await this.userService.checkForSubscription(userId, postId);\n\n      res.status(200).json({ data: isSubscribed });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public updateUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = String(req.params.id);\n\n      const userData: CreateUserDto = req.body;\n      const updateUserData: User[] = await this.userService.updateUser(userId, userData);\n\n      res.status(200).json({ data: updateUserData, message: 'updated' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public uploadDeviceToken = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = String(req.params.id);\n      const token = req.body.token;\n      await this.userService.uploadDeviceToken(userId, token);\n\n      res.status(200).json({ message: 'token uploaded succcessfully' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public desactivateUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = Number(req.params.id);\n      const desactivatedUser = await this.userService.desactivateUser(userId);\n\n      res.status(200).json({ data: desactivatedUser });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public uploadAvatar = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = String(req.params.id);\n\n      const avatarData = req.file;\n\n      await this.userService.uploadAvatar(avatarData, userId);\n\n      res.status(201).json({ messazge: \"avatar has been uploaded successfully\" });\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n\nexport default UsersController;\n"],"names":["UsersController","userService","getUsers","req","res","next","findAllUsersData","findAllUser","status","json","data","message","error","getUserById","userId","String","params","id","findOneUserData","findUserById","generateAiPictures","color","body","category","generatedPictures","checkForSale","postId","plan","checkedFOrSale","checkForSubscription","checkForSubscriptionbyUserId","console","log","getSellerPlans","sellerPlans","getFollowedSellers","followedSellers","changePassword","email","userData","emailConfirming","token","confirmed","redirect","buyPost","saleData","boughtPost","buyPosts","url","subscribe","subscriptionData","subscribeSssion","generateOtp","generatedHash","verifyOtp","otpSettings","result","cancelSubscription","sellerId","canceledSubscription","checkForSubscribtion","isSubscribed","updateUser","updateUserData","uploadDeviceToken","desactivateUser","Number","desactivatedUser","uploadAvatar","avatarData","file","messazge"],"mappings":"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"}
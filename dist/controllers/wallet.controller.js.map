{"version":3,"sources":["../../src/controllers/wallet.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport walletService from '@/services/wallet.service';\n\nclass WalletController {\n  public walletService = new walletService();\n\n  public updateBalance = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const sellerId = String(req.params.id);\n      const balanceData = req.body;\n      const newAmount = await this.walletService.UpdateBalance(sellerId, balanceData);\n\n      res.status(201).json({ data: newAmount });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getBalance = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const userId = String(req.params.id);\n      const amountWallet = await this.walletService.getBalance(userId);\n\n      res.status(201).json({ data: amountWallet });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public getPostPictures = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const postId = String(req.params.id);\n      const postPictures = await this.postService.getPostPictures(postId);\n\n      res.status(201).json({ data: postPictures });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public updateViews = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const postId = String(req.params.id);\n      const updatedViews = await this.postService.UpdateViews(postId);\n\n      res.status(201).json({ updatedViews });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public createPost = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const postData = req.body;\n      const userId = String(req.params.id);\n      const createdPost = await this.postService.createPost(userId, postData);\n\n      res.status(201).json({ data: createdPost });\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n\nexport default WalletController;\n"],"names":["WalletController","walletService","updateBalance","req","res","next","sellerId","String","params","id","balanceData","body","newAmount","UpdateBalance","status","json","data","error","getBalance","userId","amountWallet","getPostPictures","postId","postPictures","postService","updateViews","updatedViews","UpdateViews","createPost","postData","createdPost"],"mappings":";;;;+BAgEA;;;eAAA;;;sEA/D0B;;;;;;;;;;;;;;;;;;;AAE1B,IAAA,AAAMA,mBAAN,MAAMA;;QACJ,uBAAOC,iBAAgB,IAAIA,sBAAa;QAExC,uBAAOC,iBAAgB,OAAOC,KAAcC,KAAeC;YACzD,IAAI;gBACF,MAAMC,WAAWC,OAAOJ,IAAIK,MAAM,CAACC,EAAE;gBACrC,MAAMC,cAAcP,IAAIQ,IAAI;gBAC5B,MAAMC,YAAY,MAAM,IAAI,CAACX,aAAa,CAACY,aAAa,CAACP,UAAUI;gBAEnEN,IAAIU,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMJ;gBAAU;YACzC,EAAE,OAAOK,OAAO;gBACdZ,KAAKY;YACP;QACF;QAEA,uBAAOC,cAAa,OAAOf,KAAcC,KAAeC;YACtD,IAAI;gBACF,MAAMc,SAASZ,OAAOJ,IAAIK,MAAM,CAACC,EAAE;gBACnC,MAAMW,eAAe,MAAM,IAAI,CAACnB,aAAa,CAACiB,UAAU,CAACC;gBAEzDf,IAAIU,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMI;gBAAa;YAC5C,EAAE,OAAOH,OAAO;gBACdZ,KAAKY;YACP;QACF;QAEA,uBAAOI,mBAAkB,OAAOlB,KAAcC,KAAeC;YAC3D,IAAI;gBACF,MAAMiB,SAASf,OAAOJ,IAAIK,MAAM,CAACC,EAAE;gBACnC,MAAMc,eAAe,MAAM,IAAI,CAACC,WAAW,CAACH,eAAe,CAACC;gBAE5DlB,IAAIU,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMO;gBAAa;YAC5C,EAAE,OAAON,OAAO;gBACdZ,KAAKY;YACP;QACF;QAEA,uBAAOQ,eAAc,OAAOtB,KAAcC,KAAeC;YACvD,IAAI;gBACF,MAAMiB,SAASf,OAAOJ,IAAIK,MAAM,CAACC,EAAE;gBACnC,MAAMiB,eAAe,MAAM,IAAI,CAACF,WAAW,CAACG,WAAW,CAACL;gBAExDlB,IAAIU,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEW;gBAAa;YACtC,EAAE,OAAOT,OAAO;gBACdZ,KAAKY;YACP;QACF;QAEA,uBAAOW,cAAa,OAAOzB,KAAcC,KAAeC;YACtD,IAAI;gBACF,MAAMwB,WAAW1B,IAAIQ,IAAI;gBACzB,MAAMQ,SAASZ,OAAOJ,IAAIK,MAAM,CAACC,EAAE;gBACnC,MAAMqB,cAAc,MAAM,IAAI,CAACN,WAAW,CAACI,UAAU,CAACT,QAAQU;gBAE9DzB,IAAIU,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMc;gBAAY;YAC3C,EAAE,OAAOb,OAAO;gBACdZ,KAAKY;YACP;QACF;;AACF;MAEA,WAAejB"}